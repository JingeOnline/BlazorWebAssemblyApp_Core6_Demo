@page "/fetchdata"
@using BlazorWebAssemblyApp_Core6_Sample.Client.Authentication;
@using BlazorWebAssemblyApp_Core6_Sample.Shared
@attribute [Authorize(Roles = "Administrator")]
@inject HttpClient httpClient
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        //由于在服务器端，该api也需要认证的用户才能访问，所以每个请求都要携带Token。
        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        string token = await customAuthStateProvider.GetToken();
        if (!string.IsNullOrEmpty(token))
        {
            httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer",token);
            forecasts = await httpClient.GetFromJsonAsync<WeatherForecast[]>("WeatherForecast");
        }
        else
        {
            //去登陆页面登录，然后才能获取jwt token
            navManager.NavigateTo("/login");
        }
    }
}
